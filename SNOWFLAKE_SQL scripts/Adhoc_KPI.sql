USE RETAILS;
use schema PUBLIC;

SELECT * FROM demographic_RAW;
SELECT * FROM CAMPAIGN_DESC_RAW;
SELECT * FROM CAMPAIGN_RAW;
SELECT * FROM PRODUCT_RAW;
SELECT * FROM COUPON_RAW;
SELECT * FROM COUPON_REDEMPT_RAW;
SELECT * FROM TRANSACTION_RAW;

select * from CAMPAIGN_DESC_NEW;
select * from TRANSACTION_NEW;
select * from COUPON_REDEMPT_NEW;

-----deparment wise product count

select DISTINCT(DEPARTMENT), COUNT(*) AS TOTAL_PRODUCT FROM PRODUCT_RAW GROUP BY 1 ORDER BY 2 DESC;

/*1.	Customer Demographics KPIs:
A. Count of unique households: Measure the total number of unique households in the Demographic table.
B. Household composition distribution: Analyze the distribution of household compositions (HH_COMP_DESC) to understand the composition of households.
C.	Age distribution: Calculate the percentage or count of customers in different age groups (AGE_DESC).
D.	Marital status distribution: Analyze the proportion of customers in different marital status categories (MARITAL_STATUS_CODE).
E.	Income distribution: Determine the distribution of customers across income levels (INCOME_DESC).
F. Homeownership distribution: Calculate the percentage or count of customers who own or rent their homes (HOMEOWNER_DESC).*/


SELECT COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS FROM DEMOGRAPHIC_RAW; --2500

SELECT DISTINCT HOUSEHOLD_KEY,CAMPAIGN,COUPON_UPC FROM COUPON_REDEMPT_NEW LIMIT 5;



SELECT AGE_DESC, TOTAL_HOUSEHOLDS, ROUND(TOTAL_HOUSEHOLDS/2500 * 100,2) AS PERCH_AGEWISE_HOUSEHOLDS_DISTR FROM
(SELECT AGE_DESC, COUNT( DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS FROM DEMOGRAPHIC_RAW
GROUP BY 1 ORDER BY 2 DESC)
GROUP BY 1,2;

SELECT  DISTINCT INCOME_DESC AS DIST_INCOME FROM DEMOGRAPHIC_RAW ;

SELECT DISTINCT MARITAL_STATUS_CODE, count( DISTINCT HOUSEHOLD_KEY) , ROUND( count( DISTINCT HOUSEHOLD_KEY)/2500 *100,2) AS PERC_MARITAL_HOUSEHOLDS_DISTR FROM DEMOGRAPHIC_RAW GROUP BY 1
ORDER BY 2 DESC;

 SELECT DISTINCT INCOME_DESC , COUNT(DISTINCT HOUSEHOLD_KEY), ROUND( COUNT (DISTINCT HOUSEHOLD_KEY)/2500*100, 2) AS PERC_INCOME_DESC_DISTR FROM DEMOGRAPHIC_RAW GROUP BY 1 ORDER BY 2 DESC;

 SELECT DISTINCT HOMEOWNER_DESC, COUNT(DISTINCT HOUSEHOLD_KEY), ROUND( COUNT (DISTINCT HOUSEHOLD_KEY)/2500*100, 2) AS PERC_HOMEOWNER_DESC_DISTR FROM DEMOGRAPHIC_RAW GROUP BY 1 ORDER BY 2 DESC;


SELECT D.HOUSEHOLD_KEY,D.AGE_DESC,D.MARITAL_STATUS_CODE, D.INCOME_DESC, AVG(T.SALES_VALUE) AS AVG_SALES_VALUE  FROM TRANSACTION_NEW T LEFT OUTER JOIN DEMOGRAPHIC_RAW  D ON T.HOUSEHOLD_KEY = D.HOUSEHOLD_KEY;


SELECT D.HOUSEHOLD_KEY,D.AGE_DESC,D.MARITAL_STATUS_CODE, D.INCOME_DESC, AVG(T.sales_value) AS AVG_AMT, AVG(T.RETAIL_DISC) AS AVG_RETAIL_DISC , AVG(T.COUPON_DISC) AS AVG_COUPON_DISC, AVG(COUPON_MATCH_DISC) AS AVG_COUPON_MATCH_DISC, SUM(T.sales_value) AS TOTAL_SALE_AMT FROM TRANSACTION_NEW T LEFT OUTER JOIN DEMOGRAPHIC_RAW  D ON T.HOUSEHOLD_KEY = D.HOUSEHOLD_KEY GROUP BY 1,2,3,4 ORDER BY 1;


CREATE OR REPLACE PROCEDURE Household_kpi()
RETURNS STRING
LANGUAGE SQL
AS
$$
 CREATE OR REPLACE TABLE Household_kpi AS (SELECT D.HOUSEHOLD_KEY,D.AGE_DESC,D.MARITAL_STATUS_CODE, D.INCOME_DESC, AVG(T.sales_value) AS AVG_AMT, AVG(T.RETAIL_DISC) AS AVG_RETAIL_DISC , AVG(T.COUPON_DISC) AS AVG_COUPON_DISC, AVG(COUPON_MATCH_DISC) AS AVG_COUPON_MATCH_DISC, SUM(T.sales_value) AS TOTAL_SALE_AMT FROM TRANSACTION_NEW T LEFT OUTER JOIN DEMOGRAPHIC_RAW  D ON T.HOUSEHOLD_KEY = D.HOUSEHOLD_KEY GROUP BY 1,2,3,4 ORDER BY 1);
$$;

CALL Household_kpi();
SHOW PROCEDURES;
SHOW TASKS;

SELECT * FROM HOUSEHOLD_KPI;
CREATE OR REPLACE TASK Household_kpi_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE' 
AS CALL Household_kpi();

ALTER TASK   Household_kpi_TASK RESUME;
ALTER TASK  Household_kpi_TASK SUSPEND; 



/* Campaign KPIs:
o Number of campaigns: Count the total number of campaigns in the Campaign 
table.
o Campaign duration: Calculate the duration of each campaign by subtracting the 
start day from the end day (in the Campaign_desc table).
o Campaign effectiveness: Analyze the number of households associated with each 
campaign (in the Campaign table) to measure campaign reach. */


SELECT COUNT(DISTINCT CAMPAIGN) FROM CAMPAIGN_RAW; -- TOTAL 30 CAMPAIGNS

SELECT START_DATE, END_DATE,CAMPAIGN_DURATION FROM CAMPAIGN_DESC_NEW;
SELECT AVG(CAMPAIGN_DURATION) AS AVG_DURATION_CAMPAIGN FROM CAMPAIGN_DESC_NEW; --46.600000 DAYS IS THE AVERAGE DURATION OF CAMAPIGN.

SELECT DISTINCT CAMPAIGN, COUNT( DISTINCT HOUSEHOLD_KEY)  FROM CAMPAIGN_RAW GROUP BY 1 ORDER BY 2 DESC; 
-- CAMPAIGN 18 HAS THE HIGHEST NUM OF HOUSEHOLDS 


/* Coupon KPIs:
o Coupon redemption rate: Calculate the percentage of coupons redeemed (from the 
coupon_redempt table) compared to the total number of coupons distributed (from 
the Coupon table).
o Coupon usage by campaign: Measure the number of coupon redemptions (from 
the coupon_redempt table) for each campaign (in the Coupon table). */

SELECT  COUNT(DISTINCT COUPON_UPC) AS COUPONS_GIVEN FROM COUPON_RAW; -- TOTAL NUMBER OF COUPONS GIVEN 1135

SELECT COUNT( DISTINCT COUPON_UPC) AS COUPONS_REDEEMED FROM COUPON_REDEMPT_NEW; --TOTAL NUM OF COUPONS REDEEMED - 556

SELECT ROUND(COUNT( DISTINCT COUPON_UPC)/ 1135 *100,2) AS COUPON_REDEMPTION_RATE FROM COUPON_REDEMPT_NEW; -- 48.99% COUPONS WERE REDEEMED

SELECT DISTINCT CAMPAIGN, COUNT(DISTINCT COUPON_UPC) AS NUM_COUPONS_REDEEMED_PER_CAMPAIGN FROM COUPON_REDEMPT_NEW GROUP BY 1 ORDER BY 2 DESC; -- CAMPAIGN 13 HAS THE NUMBER OF REDEMPTION = 129 COUPONS REDEEMED.

SELECT DISTINCT DATE, COUNT(DISTINCT COUPON_UPC) AS NUM_COUPONS_REDEEMED_DATE FROM COUPON_REDEMPT_NEW GROUP BY 1 ORDER BY 2 DESC;


CREATE OR REPLACE PROCEDURE COUPONS_REDEEMED_DATE_kpi()
RETURNS STRING
LANGUAGE SQL
AS
$$
 CREATE OR REPLACE TABLE COUPONS_REDEEMED_DATE_kpi AS (SELECT DISTINCT DATE, COUNT(DISTINCT COUPON_UPC) AS NUM_COUPONS_REDEEMED_DATE FROM COUPON_REDEMPT_NEW GROUP BY 1 ORDER BY 2 DESC);
$$;

select * from coupons_redeemed_date_kpi limit 5;

CALL COUPONS_REDEEMED_DATE_kpi();
SHOW PROCEDURES;
SHOW TASKS;

CREATE OR REPLACE TASK COUPONS_REDEEMED_DATE_kpi_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '6 MINUTE' 
AS CALL COUPONS_REDEEMED_DATE_kpi();

ALTER TASK   COUPONS_REDEEMED_DATE_kpi_TASK RESUME;
ALTER TASK  COUPONS_REDEEMED_DATE_kpi_TASK SUSPEND;

SELECT * FROM COUPON_REDEMPT_NEW LIMIT 1;

CREATE OR REPLACE TABLE CAMPAIGN_SALES AS (SELECT DISTINCT C.CAMPAIGN, COUNT( DISTINCT C.COUPON_UPC) AS COUPONS_REDEEMED , SUM(T.sales_value) AS TOTAL_SALES FROM TRANSACTION_NEW T RIGHT JOIN COUPON_REDEMPT_NEW C 
ON T.HOUSEHOLD_KEY = C.HOUSEHOLD_KEY GROUP BY 1 ORDER BY 3 DESC);

SELECT DISTINCT C.CAMPAIGN, COUNT( DISTINCT C.COUPON_UPC) AS COUPONS_REDEEMED , SUM(T.sales_value) AS TOTAL_SALES FROM TRANSACTION_NEW T RIGHT JOIN COUPON_REDEMPT_NEW C 
ON T.HOUSEHOLD_KEY = C.HOUSEHOLD_KEY GROUP BY 1 ORDER BY 3 DESC;

CREATE OR REPLACE TABLE COUPON_kpi AS ( SELECT DISTINCT R.CAMPAIGN, COUNT(R.COUPON_UPC) AS COUPON_GIVEN, C.COUPONS_REDEEMED, C.TOTAL_SALES, ROUND( (C.COUPONS_REDEEMED/(COUNT(R.COUPON_UPC)))*100,2) AS REDEMPTION_PCT  FROM COUPON_RAW R RIGHT JOIN CAMPAIGN_SALES C 
ON R.CAMPAIGN= C.CAMPAIGN
GROUP BY 1,3,4 ORDER BY 4 DESC); 

CREATE OR REPLACE PROCEDURE COUPON_kpi()
RETURNS STRING
LANGUAGE SQL
AS
$$
 CREATE OR REPLACE TABLE COUPON_kpi AS ( SELECT DISTINCT R.CAMPAIGN, COUNT(R.COUPON_UPC) AS COUPON_GIVEN, C.COUPONS_REDEEMED, C.TOTAL_SALES, ROUND( (C.COUPONS_REDEEMED/(COUNT(R.COUPON_UPC)))*100,2) AS REDEMPTION_PCT  FROM COUPON_RAW R RIGHT JOIN CAMPAIGN_SALES C 
ON R.CAMPAIGN= C.CAMPAIGN
GROUP BY 1,3,4 ORDER BY 4 DESC);
$$;

CALL COUPON_kpi();
SHOW PROCEDURES;
SHOW TASKS;

CREATE OR REPLACE TASK COUPON_kpi
WAREHOUSE = COMPUTE_WH
SCHEDULE = '12 MINUTE' 
AS CALL COUPONS_REDEEMED_DATE_kpi();

ALTER TASK   COUPON_kpi_TASK RESUME;
ALTER TASK  COUPON_kpi_TASK SUSPEND;


SELECT * FROM COUPON_kpi;

SELECT* FROM CAMPAIGN_SALES;


/* Product KPIs:
o Sales value: Calculate the total sales value for each product (in the 
Transaction_data table) to identify top-selling products.
o Manufacturer distribution: Analyze the distribution of products across different 
manufacturers (in the Product table).
o Department-wise sales: Measure the sales value by department (in the Product 
table) to understand which departments contribute most to revenue.
o Brand-wise sales: Calculate the sales value for each brand (in the Product table) to 
identify top-selling brands. */

SELECT DISTINCT T.PRODUCT_ID, P.DEPARTMENT, P.COMMODITY_DESC,P.SUB_COMMODITY_DESC,P.BRAND, SUM(T.SALES_VALUE) AS TOTAL_SALES_AMT FROM TRANSACTION_NEW T LEFT OUTER JOIN PRODUCT_RAW P
ON T.PRODUCT_ID= P.PRODUCT_ID
GROUP BY 1,2,3,4,5 ORDER BY 5 DESC;

CREATE OR REPLACE PROCEDURE PRODUCTS_kpi()
RETURNS STRING
LANGUAGE SQL
AS
$$
 CREATE OR REPLACE TABLE PRODUCTS_kpi AS (SELECT DISTINCT T.PRODUCT_ID, P.DEPARTMENT, P.COMMODITY_DESC,P.SUB_COMMODITY_DESC,P.BRAND, SUM(T.SALES_VALUE) AS TOTAL_SALES_AMT FROM TRANSACTION_NEW T LEFT OUTER JOIN PRODUCT_RAW P
ON T.PRODUCT_ID= P.PRODUCT_ID
GROUP BY 1,2,3,4,5 ORDER BY 5 DESC);
$$;

CALL PRODUCTS_kpi();
SHOW PROCEDURES;
SHOW TASKS;
select * from products_kpi limit 5;
CREATE OR REPLACE TASK PRODUCTS_kpii_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '7 MINUTE' 
AS CALL PRODUCTS_kpi();

ALTER TASK   PRODUCTS_kpi_TASK RESUME;
ALTER TASK  PRODUCTS_kpi_TASK SUSPEND; 

/* Transaction KPIs:
o Total sales value: Calculate the sum of sales values (in the Transaction_data table) 
to measure overall revenue.
o Average transaction value: Calculate the average sales value per transaction to 
understand customer spending patterns.
o Quantity sold: Measure the total quantity sold (in the Transaction_data table) to 
understand product demand. */


SELECT * FROM TRANSACTION_NEW T LEFT OUTER JOIN DEMOGRAPHIC_RAW D
ON T.HOUSEHOLD_KEY = D.HOUSEHOLD_KEY LIMIT 5;

SELECT DISTINCT HOUSEHOLD_KEY,AVG(SALES_VALUE) FROM TRANSACTION_NEW GROUP BY 1 ORDER BY 2 DESC;

SELECT SUM(SALES_VALUE) TOTAL_SALES_AMT FROM TRANSACTION_NEW; -- TOTAL SALES AMOUNT IS 1359551.73$

SELECT DISTINCT D.HOUSEHOLD_KEY, D.AGE_DESC,D.INCOME_DESC,ROUND(AVG(T.sales_value),2) AS AVG_SALES_AMT FROM TRANSACTION_NEW T LEFT OUTER JOIN DEMOGRAPHIC_RAW D
ON T.HOUSEHOLD_KEY = D.HOUSEHOLD_KEY GROUP BY 1,2,3 ORDER BY 4 DESC; --AVERAGE SALES AMOUNT WITH DEMOGRAPHIC DETAILS OF CUSTOMER

SELECT DISTINCT T.PRODUCT_ID,P.COMMODITY_DESC,P.DEPARTMENT,P.SUB_COMMODITY_DESC,P.BRAND, T.coupon_disc, T.coupon_match_disc 
 , SUM(T.sales_value) ,SUM(T.QUANTITY)AS TOTAL_QUANTITY_SOLD
FROM TRANSACTION_NEW T LEFT OUTER JOIN PRODUCT_RAW P 
ON T.PRODUCT_ID = P.PRODUCT_ID GROUP BY 1,2,3,4,5,6,7 ORDER BY 8 DESC; 
-- GIVES THE DETAILS OF THE HIGEST QUANTITY SOLD ITEMS HIGHEST SOLD ITEM IS OF KIOSK-GAS DEPARMENT.

CREATE OR REPLACE PROCEDURE TRANS_NEW_kpi()
RETURNS STRING
LANGUAGE SQL
AS
$$
 CREATE OR REPLACE TABLE TRANSACTION_kpi AS (SELECT DISTINCT T.PRODUCT_ID,P.COMMODITY_DESC,P.DEPARTMENT,P.SUB_COMMODITY_DESC,P.BRAND, T.coupon_disc, T.coupon_match_disc 
 , SUM(T.sales_value) AS TOTAL_SALES_AMT ,SUM(T.QUANTITY)AS TOTAL_QUANTITY_SOLD
FROM TRANSACTION_NEW T LEFT OUTER JOIN PRODUCT_RAW P 
ON T.PRODUCT_ID = P.PRODUCT_ID GROUP BY 1,2,3,4,5,6,7 ORDER BY 8 DESC);
$$;

 
CALL TRANS_NEW_kpi();
SHOW PROCEDURES;
SHOW TASKS;

CREATE OR REPLACE TASK TRANSACTION_kpi_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '10 MINUTE' 
AS CALL PRODUCTS_kpi();

SELECT DISTINCT T.PRODUCT_ID,P.COMMODITY_DESC,P.DEPARTMENT,P.SUB_COMMODITY_DESC,P.BRAND, T.coupon_disc, T.coupon_match_disc 
 , SUM(T.sales_value) ,SUM(T.QUANTITY)AS TOTAL_QUANTITY_SOLD
FROM TRANSACTION_NEW T LEFT OUTER JOIN PRODUCT_RAW P 
ON T.PRODUCT_ID = P.PRODUCT_ID GROUP BY 1,2,3,4,5,6,7 ORDER BY 8 DESC;

CREATE OR REPLACE TABLE TRANSACTION_kpi AS (SELECT DISTINCT T.PRODUCT_ID,P.COMMODITY_DESC,P.DEPARTMENT,P.SUB_COMMODITY_DESC,P.BRAND, T.coupon_disc, T.coupon_match_disc 
 , SUM(T.sales_value) AS TOTAL_SALES_AMT ,SUM(T.QUANTITY)AS TOTAL_QUANTITY_SOLD
FROM TRANSACTION_NEW T LEFT OUTER JOIN PRODUCT_RAW P 
ON T.PRODUCT_ID = P.PRODUCT_ID GROUP BY 1,2,3,4,5,6,7 ORDER BY 8 DESC);
